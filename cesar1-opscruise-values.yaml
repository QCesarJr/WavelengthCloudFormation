##### Opscruise credentials #####
global:
  ##### AWS Credentials #####
  awsCredentials:
    region: us-east-1
    aws_access_key_id: aws_access_key_id
    aws_secret_access_key: aws_secret_access_key

    # roleArn specify instead of aws_access_key_id and aws_secret_access_key
    roleArn: ""

  ##### gateway Credentials #####
  gatewayCreds:
    environment:
      DOCKER_SERVER: "https://index.docker.io/v1/"
      DOCKER_USERNAME: "opscruisetest"
      DOCKER_PASSWORD: "Opscruise2050"
      DOCKER_EMAIL: "cesar@opscruise.com"
      OPSCRUISE_ENDPOINT: "cesar1.opscruise.io:9093"
      KEYCLOAK_ENABLED: "true"
      KEYCLOAK_URL: "https://devauth.opscruise.io:8443"
      KEYCLOAK_CLIENT_ID: "kafka-dev-client"
      KEYCLOAK_CLIENT_SECRET: "6bf1c0db-a4d0-4176-aea9-18344750a330"
      KEYCLOAK_REALM: "cesar1"
      OPSCRUISE_ACCOUNT_ID: "dev"


##### Awsgw configs #####
awsgw:
  logLevel: "info"
  labels:
    #key: value
  annotations:
    #key: value
  tolerations:
  #- key: node-role.kubernetes.io/master
  #  effect: NoSchedule
  priorityClassName: ""

  # Resources
  resources:
    limits:
      cpu: 500m
      memory: 250Mi
    requests:
      cpu: 200m
      memory: 50Mi


##### K8sgw configs #####
k8sgw:
  logLevel: "info"
  labels:
    #key: value
  annotations:
    #key: value
  tolerations:
  #- key: node-role.kubernetes.io/master
  #  effect: NoSchedule
  priorityClassName: ""

  # Resources
  resources:
    limits:
      cpu: 500m
      memory: 500Mi
    requests:
      cpu: 200m
      memory: 50Mi

##### Promgw configs #####
promgw:
  logLevel: "info"
  labels:
    #key: value
  annotations:
    #key: value
  tolerations:
  #- key: node-role.kubernetes.io/master
  #  effect: NoSchedule
  priorityClassName: ""

  # Resources
  resources:
    limits:
      cpu: 500m
      memory: 300Mi
    requests:
      cpu: 200m
      memory: 50Mi

##### Loggw config #####
loggw-loki:
  logLevel: "INFO"
  config:
    jgateway:
      lokiHost: "loki.collectors.svc.cluster.local:3100"

  labels:
    #key: value
  annotations:
    #key: value
  tolerations:
  #- key: node-role.kubernetes.io/master
  #  effect: NoSchedule
  priorityClassName: ""

  # Resources
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 200m
      memory: 256Mi

##### Azuregw configs #####
azuregw:
  logLevel: "INFO"

  azureCredentials:
    azureauth_clientId: azureauth_clientId
    azureauth_tenantId: azureauth_tenantId
    azureauth_clientSecret: azureauth_clientSecret

  labels:
    #key: value
  annotations:
    #key: value
  tolerations:
  #- key: node-role.kubernetes.io/master
  #  effect: NoSchedule
  priorityClassName: ""

  #Resources
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 200m
      memory: 256Mi

##### Gcpgw configs #####
gcpgw:
  logLevel: "INFO"

  labels:
    #key: value
  annotations:
    #key: value
  tolerations:
  #- key: node-role.kubernetes.io/master
  #  effect: NoSchedule
  priorityClassName: ""

  #Resources
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi


##### Node-exporter configs #####
opscruise-node-exporter:
  labels:
    #key: value
  annotations:
    #key: value
  tolerations:
  #- key: node-role.kubernetes.io/master
  #  effect: NoSchedule
  priorityClassName: ""

  # args:
    # webListenAddress: --web.listen-address=:9100


##### cadvisor configs #####
cadvisor:
  labels:
    #key: value
  annotations:
    #key: value
  tolerations:
  #- key: node-role.kubernetes.io/master
  #  effect: NoSchedule
  priorityClassName: ""


##### KSM configs #####
kube-state-metrics:
  labels:
    #key: value
  annotations:
    #key: value
  tolerations:
  #- key: node-role.kubernetes.io/master
  #  effect: NoSchedule
  priorityClassName: ""


##### prometheus configs #####
prometheus:
  enableIstio: false
  enablePersistent: false
  labels:
    #key: value
  annotations:
    #key: value
  tolerations:
  #- key: node-role.kubernetes.io/master
  #  effect: NoSchedule
  priorityClassName: ""

  nonIstioConfigMap:
    additionalScrapeConfigs:
      # -   job_name: 'oc-node-exporter'
      #     ec2_sd_configs:
      #     -   region: "us-east-1"
      #         profile: "role_arn"
      #         port: 9100
      #     relabel_configs:
      #     -   source_labels: [__meta_ec2_tag_opscruise_bare_vm]
      #         regex: "true"
      #         action: keep
